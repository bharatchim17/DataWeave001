//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Datawave0001:-

// Object is always enclosed with {} and contains key:value pairs.
// An Array is always enclosed with [] and contains only Value
// MapObject use for object and object of object -> output is object
// Map use for Array and array of object -> output is array
// reduce use for Array --> output form is object with single value
// pluck use for object --> output form is Array
// flatten work on array it accepts single argument i.e.(one parameter)as input  --> output form is Array (Turn set of array into single array as output)
// $ represent value $$ represent index
// if(condition) value1 else value2

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Datawave0002/0003:-

// Q:- Does the desendent selector select all the keys or just first one in nested object.. ?? 
 A:- Desendent selector, select just first one in nested object.

// Q:- Does the multi value selector select keys on nested level of the object.. ??
 A:- No , multi value selector does'not select keys on nested level of the object.

// Q:- What happens if you combine both Descendent and Multi-value selectors.. ??
 A:- it will select all the keys that we want to access.

// Logical operators allow you to write true/false kind of expression.

// Flow control used when you want to execute certain part of your code in some situations ,
 while not excecuting others. (its way to add logic to your scripts). DataWeave use if else expression that returns value.. 
 example:- 1. if(condition) code1 else code2
           2. (expression) match 
           {
case (condition) -> execute_if_condition_pass
else (condition) -> if_no_condition_pass
           }
           
// function without name called as Lambda , Lambda is value just like string we can assign it to varaibles.
:-  ((argument) -> body) () 
Lambda became useful when you want to use function as argument to other function or return function from function is called as higher ordered function..

// prefix function:- In Prefix notation function name came first (before argument function name is written) then argument made :- functionName_(argument).
// Infix notation :- In infix notation function takes two argument , Lambda be the second argument of it :- (argument_1) functionName_ (argument_2)


// $ , $$ , $$$ :- 
$ first argument ,$$ second argument , $$$ third argument   //(in lambda functions)

// Scope are created by using do statement , where we can declare varaibles and more function..

// Filter function :- it iterates over array and applies an expression that returns matching values. expression must return true or false.
Filter work on array -> output form as array.

//pluck function :- The pluck function iterates over each key-value pairs of an input object. 
it used to retrieve the values($), keys($$) and index ($$$) from object and return -> output form as array.

//Map function:- The map function iterates over each element of array applies transformation (Lambda expression) to each element and return as Array. 
it takes two input array and Lambda expression in which array input comes before map function and lambda expression comes after map function. 

// Map Object :-  it use to transform data in object , by iterating each key-value pair (it work on object and return output as object..)
map object take two input 1> object to transform (written left  to MapObject) 
                          2> lambda expression.. (written right to MapObject)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Datawave0004:-

// Datawave (dw) format is canonical format (generical format i.e. predefined structure) , for all transformation. 

// ~= :- When types are different it coerce one value of types to other.

// and operators :- all of the value must be true for output as true if even one value is false then output print false.. 
// or operators :- one of the value must be true for output as true if all value is false then output print false..

//Metadata :- Is data that provides information about other data , but not the content of other data. (content that be manipultable)
//index value selector :-  payload[1/-1] -> can have both positive and negative value.
//Range value selector :-  payload[1 to -3] -> can have both positive and negative value.

//output of multi-value selector is an array , it works for both array and objects..

//Prepend >> [] :- Data is left hand side and array is right hand side.. 
//Append  [] << :- Data is right hand side and array is left hand side..

//predefined varaibles :-
1. correlationID
2. Error
3. Authentification
4. Flow
5. mule 
6. server
7. var
8. app 
9. Datatypes
10. attribute
11. message
12. payload

//function syntax :-
 (fun)key_functionName_(parameter1,2,3) = {logic}
 whenever there value associate to the first argument , assign value direction  will be right to left..

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Datawave0005:-
 
 import * from dw::core::Arrays

 //countBy :- it takes array (right hand side of the function) it count based upon matchingFunction (left hand side of the function)  return output as object 
 countBy works as boolean (true/false), if it is true it will be print in the output.

 //divideBy:- it takes array (right hand side) it dividation (make unit) based on amount of number (amount is left hand side of function) it returns output as form of object of array..

 //indexOf :- it find first accurance value's index in array and print it.
  example: indexOf(var_name , "value")

  //slice :- it slice from value to unit value from an array and gives output as (part of) array .
example: slice(var_name , from_index , unitil_index)..

//sumby :- it works on array and Returns the sum of the values of the elements.
example: [ ]sumBy $.key

//////////////////////////////////////////////////////////////////////////////////////
// import * from dw::core::Strings

// camelize("hi_mule")  // In input underscore use for camelize
// capitalize("hello mule")  // space added between words for capitalize first letter. output:- "Hello Mule"
//upper("hello") // output:- "HELLO"
//lower("CHIM")  // output:- "chim"
//isUpperCase("hi")  //output :- false (return boolean value)
//isLowerCase("hi")  //output :- true (return boolean value)
//replaceAll(" Hello , CHIM " ,  "CHIM" , "Mule")  // (value  , target , replacement) output:- "Hello , Mule"
//substring("bharat" , 0 , 3) // output :- bha
//singularize("boys") // output:- boy
//pluralize("girl") // output:- girls
//wrapWith("bharat" , "*") // output:- "*bharat*"

//////////////////////////////////////////////////////////////////////////////////////
//Datawave operators:-

//distinctBy:- Iterates over the input and returns the unique elements in it( finds unique values in an array)..

//endsWith:- Returns true if a string ends with a provided substring, false if not.

//find:- Returns indices of an input that match a specified value.

//indexOf :- Returns the index of the first occurrence of the specified element in this array, or -1 if this list does not contain the element.

*//isBlank:- Returns true if the given string is empty (""), completely composed of whitespaces("    "), or null. Otherwise, the function returns false.
//isEmpty:- Returns true if the input string is empty.

//min :- Returns the highest Comparable value in an array.
// max :- Returns the lowest Comparable value in an array.

//mod:- Returns the modulo (the remainder after dividing the dividend by the divisor).

//isDecimal:- Returns true if the given number contains a decimal, false if not.

//flatten:- Turns a set of subarrays into a single, flattened array.

// function within function called higher order function.

//Q.Define:-
1.Anonymus function :- function without name..
2.Lambda function
3.higher order function

////////////////////////////////////////////////////////////////////
DataWeave0006:-
// map function:- Iterates over items and indices in an array and outputs the results into a new array.
in which mapper take two input item ($) and index ($$)..
  example:-     ($$) : $  here, $$ is index and $ represent object. 

//MapObject:- Iterates over an object using a mapper that acts on values ($) , keys ($$) or indices ($$$) of that object.

//Filter :- Iterates over an array and applies an expression that returns matching values.
The expression must return true or false.
Filter works with map and filterObject works with MapObject.

//filterObject:- Iterates a list of key-value pairs in an object and applies an expression that returns only matching objects, filtering out the rest from the output.
The expression must return true or false

//startsWith:- Returns true or false depending on whether the input string starts with a matching prefix. #(wrap)