////////////////////////////////////////////////////////////////////////////////////////////
Datawave0001:-

// Object is always enclosed with {} and contains key:value pairs.
// An Array is always enclosed with [] and contains only Value
// MapObject use for object and object of object -> output is object
// Map use for Array and array of object -> output is array
// reduce use for Array --> output form is object with single value
// pluck use for object --> output form is Array
// flatten work on array it accepts single argument i.e.(one parameter)as input  --> output form is Array (Turn set of array into single array as output)
// $ represent value $$ represent index
// if(condition) value1 else value2

////////////////////////////////////////////////////////////////////////////////
Datawave0002:-

// Q:- Does the desendent selector select all the keys or just first one in nested object.. ?? 
 A:- Desendent selector, select just first one in nested object.

// Q:- Does the multi value selector select keys on nested level of the object.. ??
 A:- No , multi value selector does'not select keys on nested level of the object.

// Q:- What happens if you combine both Descendent and Multi-value selectors.. ??
 A:- it will select all the keys that we want to access.

// Logical operators allow you to write true/false kind of expression.

// Flow control used when you want to execute certain part of your code in some situations ,
 while not excecuting others. (its way to add logic to your scripts). DataWeave use if else expression that returns value.. 
 example:- 1. if(condition) code1 else code2
           2. (expression) match 
           {
case (condition) -> execute_if_condition_pass
else (condition) -> if_no_condition_pass
           }
           
// function without name called as Lambda , Lambda is value just like string we can assign it to varaibles.
:-  ((argument) -> body) () 
Lambda became useful when you want to use function as argument to other function or return function from function is called as higher ordered function..

// prefix function:- In Prefix notation function name came first (before argument function name is written) then argument made :- functionName_(argument).
// Infix notation :- In infix notation function takes two argument , Lambda be the second argument of it :- (argument_1) functionName_ (argument_2)


// $ , $$ , $$$ :- 
$ first argument ,$$ second argument , $$$ third argument

// Scope are created by using do statement , where we can declare varaibles and more function..

// Filter function :- it iterates over array and applies an expression that returns matching values. expression must return true or false.
Filter work on array -> output form as array.

//pluck function :- The pluck function iterates over each key-value pairs of an input object. 
it used to retrieve the values($), keys($$) and index ($$$) from object and return -> output form as array.

//Map function:- The map function iterates over each element of array applies transformation (Lambda expression) to each element and return as Array. 
it takes two input array and Lambda expression in which array input comes before map function and lambda expression comes after map function. 

// Map Object :-  it use to transform data in object , by iterating each key-value pair (it work on object and return output as object..)
map object take two input 1> object to transform (written left  to MapObject) 
                          2> lambda expression.. (written right to MapObject)
/////////////////////////////////////////////////////////////////////////
